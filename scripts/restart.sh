#!/bin/bash

# =================================================================
# SIO Audit App - Script de red√©marrage
# =================================================================

set -e

# Couleurs
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'
NC='\033[0m'

# Configuration
DEFAULT_ENV="production"
ENV=${1:-$DEFAULT_ENV}
SERVICE=""
REBUILD=false
FORCE_RECREATE=false

# Fichiers de configuration
if [ "$ENV" = "dev" ] || [ "$ENV" = "development" ]; then
    COMPOSE_FILE="docker-compose.dev.yml"
    ENV_NAME="d√©veloppement"
else
    COMPOSE_FILE="docker-compose.yml"
    ENV_NAME="production"
fi

# Fonction d'aide
show_help() {
    echo "Usage: $0 [environment] [service] [options]"
    echo ""
    echo "Environments:"
    echo "  production (default) - Mode production"
    echo "  dev                  - Mode d√©veloppement"
    echo ""
    echo "Services disponibles:"
    echo "  frontend            - Frontend React/Vite"
    echo "  backend             - Backend Node.js"
    echo "  backend_python      - Backend Python/FastAPI"
    echo "  backend_llm         - Service LLM/IA"
    echo "  mongodb             - Base de donn√©es MongoDB"
    echo "  nginx               - Serveur web Nginx (prod uniquement)"
    echo "  adminer             - Interface DB (dev uniquement)"
    echo ""
    echo "Options:"
    echo "  --rebuild, -r       - Reconstruire les images avant red√©marrage"
    echo "  --force, -f         - Forcer la recr√©ation des conteneurs"
    echo "  --help, -h          - Afficher cette aide"
    echo ""
    echo "Exemples:"
    echo "  $0                          # Red√©marrer tous les services en production"
    echo "  $0 dev                      # Red√©marrer tous les services en d√©veloppement"
    echo "  $0 prod backend             # Red√©marrer seulement le backend"
    echo "  $0 dev --rebuild            # Red√©marrer avec reconstruction des images"
    echo "  $0 backend --force          # Forcer la recr√©ation du backend"
}

# Traitement des arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --help|-h)
            show_help
            exit 0
            ;;
        --rebuild|-r)
            REBUILD=true
            shift
            ;;
        --force|-f)
            FORCE_RECREATE=true
            shift
            ;;
        dev|development|prod|production)
            ENV=$1
            if [ "$ENV" = "dev" ] || [ "$ENV" = "development" ]; then
                COMPOSE_FILE="docker-compose.dev.yml"
                ENV_NAME="d√©veloppement"
            else
                COMPOSE_FILE="docker-compose.yml"
                ENV_NAME="production"
            fi
            shift
            ;;
        frontend|backend|backend_python|backend_llm|mongodb|nginx|adminer)
            SERVICE=$1
            shift
            ;;
        *)
            echo -e "${RED}Option inconnue: $1${NC}"
            show_help
            exit 1
            ;;
    esac
done

echo -e "${BLUE}======================================${NC}"
echo -e "${BLUE}  SIO Audit App - Red√©marrage${NC}"
echo -e "${BLUE}======================================${NC}"
echo ""

# V√©rification de Docker
if ! command -v docker &> /dev/null; then
    echo -e "${RED}‚ùå Docker n'est pas install√©${NC}"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo -e "${RED}‚ùå Docker Compose n'est pas install√©${NC}"
    exit 1
fi

# V√©rification du fichier compose
if [ ! -f "$COMPOSE_FILE" ]; then
    echo -e "${RED}‚ùå Fichier $COMPOSE_FILE introuvable${NC}"
    exit 1
fi

# Affichage de la configuration
echo -e "${CYAN}üîÑ Configuration du red√©marrage:${NC}"
echo "   Environnement:      $ENV_NAME"
echo "   Service(s):         $([ -n "$SERVICE" ] && echo "$SERVICE" || echo "Tous les services")"
echo "   Reconstruction:     $([ "$REBUILD" = true ] && echo "Oui" || echo "Non")"
echo "   Recr√©ation forc√©e:  $([ "$FORCE_RECREATE" = true ] && echo "Oui" || echo "Non")"
echo ""

# V√©rifier l'√©tat des services
echo -e "${YELLOW}1. V√©rification de l'√©tat actuel...${NC}"

RUNNING_SERVICES=$(docker-compose -f $COMPOSE_FILE ps --services --filter "status=running" 2>/dev/null || echo "")

if [ -z "$RUNNING_SERVICES" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Aucun service en cours d'ex√©cution${NC}"
    echo "D√©marrage initial de l'application..."
    
    # Lancer le script de d√©marrage √† la place
    if [ -n "$SERVICE" ]; then
        echo -e "${BLUE}Note: Le service sp√©cifique sera d√©marr√© avec tous les autres${NC}"
    fi
    
    exec ./scripts/start.sh $ENV
    exit 0
fi

echo -e "${GREEN}‚úÖ Services actifs d√©tect√©s:${NC}"
echo "$RUNNING_SERVICES" | while read -r service; do
    if [ -n "$service" ]; then
        echo "   ‚Ä¢ $service"
    fi
done

# V√©rification du service sp√©cifique
if [ -n "$SERVICE" ]; then
    if ! echo "$RUNNING_SERVICES" | grep -q "^$SERVICE$"; then
        echo -e "${YELLOW}‚ö†Ô∏è  Le service '$SERVICE' n'est pas en cours d'ex√©cution${NC}"
        echo "Il sera d√©marr√© lors du red√©marrage."
    fi
fi

# Sauvegarde automatique avant red√©marrage (pour MongoDB en production)
if [ "$ENV" != "dev" ] && [ "$ENV" != "development" ] && [ "$FORCE_RECREATE" = true ]; then
    if [ -z "$SERVICE" ] || [ "$SERVICE" = "mongodb" ]; then
        echo -e "${YELLOW}2. Sauvegarde pr√©ventive de MongoDB...${NC}"
        
        if docker-compose -f $COMPOSE_FILE ps | grep -q "mongodb.*Up"; then
            BACKUP_DIR="backup/$(date +%Y%m%d_%H%M%S)_before_restart"
            mkdir -p "$BACKUP_DIR"
            
            if docker-compose -f $COMPOSE_FILE exec -T mongodb mongodump --out /tmp/backup_restart 2>/dev/null; then
                docker-compose -f $COMPOSE_FILE cp mongodb:/tmp/backup_restart "$BACKUP_DIR/" 2>/dev/null || true
                echo -e "${GREEN}   ‚úÖ Sauvegarde cr√©√©e dans $BACKUP_DIR${NC}"
            else
                echo -e "${YELLOW}   ‚ö†Ô∏è  Sauvegarde impossible, continuer? (y/N)${NC}"
                read -p "" confirm
                if [ "$confirm" != "y" ] && [ "$confirm" != "Y" ]; then
                    echo "Red√©marrage annul√©."
                    exit 0
                fi
            fi
        fi
    fi
fi

# √âtape de reconstruction si demand√©e
if [ "$REBUILD" = true ]; then
    echo -e "${YELLOW}2. Reconstruction des images...${NC}"
    
    if [ -n "$SERVICE" ]; then
        echo -e "${BLUE}   üî® Reconstruction de $SERVICE...${NC}"
        docker-compose -f $COMPOSE_FILE build --no-cache $SERVICE
    else
        echo -e "${BLUE}   üî® Reconstruction de toutes les images...${NC}"
        docker-compose -f $COMPOSE_FILE build --no-cache
    fi
    
    echo -e "${GREEN}   ‚úÖ Images reconstruites${NC}"
fi

# √âtape d'arr√™t
echo -e "${YELLOW}3. Arr√™t des services...${NC}"

if [ -n "$SERVICE" ]; then
    echo -e "${BLUE}   üõë Arr√™t de $SERVICE...${NC}"
    docker-compose -f $COMPOSE_FILE stop $SERVICE
else
    echo -e "${BLUE}   üõë Arr√™t de tous les services...${NC}"
    
    # Arr√™t ordonn√© : frontend -> backends -> base de donn√©es
    for stop_service in frontend backend backend_python backend_llm nginx adminer; do
        if echo "$RUNNING_SERVICES" | grep -q "^$stop_service$"; then
            echo -e "${CYAN}      Arr√™t de $stop_service...${NC}"
            docker-compose -f $COMPOSE_FILE stop $stop_service
        fi
    done
    
    # MongoDB en dernier
    if echo "$RUNNING_SERVICES" | grep -q "mongodb"; then
        echo -e "${CYAN}      Arr√™t de MongoDB...${NC}"
        docker-compose -f $COMPOSE_FILE stop mongodb
    fi
fi

echo -e "${GREEN}   ‚úÖ Services arr√™t√©s${NC}"

# Suppression des conteneurs si recr√©ation forc√©e
if [ "$FORCE_RECREATE" = true ]; then
    echo -e "${YELLOW}4. Suppression des conteneurs...${NC}"
    
    if [ -n "$SERVICE" ]; then
        docker-compose -f $COMPOSE_FILE rm -f $SERVICE
    else
        docker-compose -f $COMPOSE_FILE rm -f
    fi
    
    echo -e "${GREEN}   ‚úÖ Conteneurs supprim√©s${NC}"
fi

# √âtape de red√©marrage
echo -e "${YELLOW}5. Red√©marrage des services...${NC}"

# Construction de la commande
RESTART_CMD="docker-compose -f $COMPOSE_FILE up -d"

if [ "$FORCE_RECREATE" = true ]; then
    RESTART_CMD="$RESTART_CMD --force-recreate"
fi

if [ -n "$SERVICE" ]; then
    RESTART_CMD="$RESTART_CMD $SERVICE"
    echo -e "${BLUE}   üöÄ Red√©marrage de $SERVICE...${NC}"
else
    echo -e "${BLUE}   üöÄ Red√©marrage de tous les services...${NC}"
fi

# Ex√©cution du red√©marrage
if ! eval $RESTART_CMD; then
    echo -e "${RED}‚ùå Erreur lors du red√©marrage${NC}"
    echo ""
    echo -e "${YELLOW}Tentative de diagnostic:${NC}"
    docker-compose -f $COMPOSE_FILE ps
    docker-compose -f $COMPOSE_FILE logs --tail=20
    exit 1
fi

echo -e "${GREEN}   ‚úÖ Services red√©marr√©s${NC}"

# V√©rification de la sant√© des services
echo -e "${YELLOW}6. V√©rification de la sant√© des services...${NC}"

sleep 5

# Fonction pour v√©rifier si un service est en bonne sant√©
check_service_health() {
    local service=$1
    local url=$2
    local max_attempts=15
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -f -s $url > /dev/null 2>&1; then
            return 0
        fi
        sleep 2
        attempt=$((attempt + 1))
    done
    return 1
}

# V√©rifications sp√©cifiques selon le service
if [ -z "$SERVICE" ] || [ "$SERVICE" = "mongodb" ]; then
    echo -e "${CYAN}   üîç MongoDB...${NC}"
    if docker-compose -f $COMPOSE_FILE exec -T mongodb mongosh --eval "db.adminCommand('ping')" > /dev/null 2>&1; then
        echo -e "${GREEN}   ‚úÖ MongoDB op√©rationnel${NC}"
    else
        echo -e "${YELLOW}   ‚ö†Ô∏è  MongoDB encore en cours de d√©marrage${NC}"
    fi
fi

if [ -z "$SERVICE" ] || [ "$SERVICE" = "backend" ]; then
    echo -e "${CYAN}   üîç Backend Node.js...${NC}"
    if check_service_health "backend" "http://localhost:4000/api/health"; then
        echo -e "${GREEN}   ‚úÖ Backend Node.js op√©rationnel${NC}"
    else
        echo -e "${YELLOW}   ‚ö†Ô∏è  Backend Node.js encore en d√©marrage${NC}"
    fi
fi

if [ -z "$SERVICE" ] || [ "$SERVICE" = "backend_python" ]; then
    echo -e "${CYAN}   üîç Backend Python...${NC}"
    if check_service_health "backend_python" "http://localhost:8000/health"; then
        echo -e "${GREEN}   ‚úÖ Backend Python op√©rationnel${NC}"
    else
        echo -e "${YELLOW}   ‚ö†Ô∏è  Backend Python encore en d√©marrage${NC}"
    fi
fi

if [ -z "$SERVICE" ] || [ "$SERVICE" = "backend_llm" ]; then
    echo -e "${CYAN}   üîç Service LLM...${NC}"
    if check_service_health "backend_llm" "http://localhost:8001/health"; then
        echo -e "${GREEN}   ‚úÖ Service LLM op√©rationnel${NC}"
    else
        echo -e "${YELLOW}   ‚ö†Ô∏è  Service LLM encore en d√©marrage${NC}"
    fi
fi

# R√©sum√© final
echo ""
echo -e "${GREEN}======================================${NC}"
echo -e "${GREEN}  ‚úÖ Red√©marrage termin√©${NC}"
echo -e "${GREEN}======================================${NC}"
echo ""

echo -e "${BLUE}üìä R√©sum√©:${NC}"
echo "   Environnement:      $ENV_NAME"
echo "   Service(s):         $([ -n "$SERVICE" ] && echo "$SERVICE" || echo "Tous les services")"
echo "   Images reconstruites: $([ "$REBUILD" = true ] && echo "Oui" || echo "Non")"
echo "   Conteneurs recr√©√©s: $([ "$FORCE_RECREATE" = true ] && echo "Oui" || echo "Non")"

# Afficher les URLs d'acc√®s
echo ""
echo -e "${BLUE}üì± URLs d'acc√®s:${NC}"
if [ "$ENV" = "dev" ] || [ "$ENV" = "development" ]; then
    echo "   Frontend (Dev):     http://localhost:5173"
    echo "   Adminer (DB):       http://localhost:8080"
else
    echo "   Frontend:           http://localhost:80"
fi
echo "   Backend Node.js:    http://localhost:4000"
echo "   Backend Python:     http://localhost:8000"
echo "   Service LLM:        http://localhost:8001"

# Afficher le statut final
echo ""
echo -e "${BLUE}üìã Statut final des services:${NC}"
docker-compose -f $COMPOSE_FILE ps

echo ""
echo -e "${BLUE}üí° Commandes utiles:${NC}"
echo "   Voir les logs:      ./scripts/logs.sh $ENV"
echo "   Arr√™ter:            ./scripts/stop.sh $ENV"
echo "   Surveiller:         ./scripts/monitor.sh $ENV"

echo ""
echo -e "${GREEN}üéØ Red√©marrage de l'application SIO Audit r√©ussi !${NC}"


