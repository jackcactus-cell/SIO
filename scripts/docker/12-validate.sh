#!/bin/bash
set -e

echo "Validation de l'installation SIO"
echo "================================"

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Fonction de validation
validate() {
    local test_name="$1"
    local command="$2"
    local expected="$3"
    
    echo -n "Test: $test_name... "
    
    if eval "$command" 2>/dev/null | grep -q "$expected"; then
        echo -e "${GREEN}‚úÖ OK${NC}"
        return 0
    else
        echo -e "${RED}‚ùå √âCHEC${NC}"
        return 1
    fi
}

# Fonction de test de port
test_port() {
    local port="$1"
    local service="$2"
    
    echo -n "Test: Port $port ($service)... "
    
    if curl -s -o /dev/null -w "%{http_code}" "http://localhost:$port" | grep -q "200\|404\|403"; then
        echo -e "${GREEN}‚úÖ OK${NC}"
        return 0
    else
        echo -e "${RED}‚ùå √âCHEC${NC}"
        return 1
    fi
}

# Compteurs
total_tests=0
passed_tests=0

echo
echo "=== V√©rification des pr√©requis ==="

# Test Docker
((total_tests++))
if validate "Docker install√©" "docker --version" "Docker version"; then
    ((passed_tests++))
fi

# Test Docker Compose
((total_tests++))
if validate "Docker Compose install√©" "docker-compose --version" "docker-compose version"; then
    ((passed_tests++))
fi

# Test fichier .env
((total_tests++))
if [ -f ".env" ]; then
    echo -e "Test: Fichier .env... ${GREEN}‚úÖ OK${NC}"
    ((passed_tests++))
else
    echo -e "Test: Fichier .env... ${RED}‚ùå √âCHEC${NC}"
fi

# Test fichier backend_python/.env
((total_tests++))
if [ -f "backend_python/.env" ]; then
    echo -e "Test: Fichier backend_python/.env... ${GREEN}‚úÖ OK${NC}"
    ((passed_tests++))
else
    echo -e "Test: Fichier backend_python/.env... ${RED}‚ùå √âCHEC${NC}"
fi

echo
echo "=== V√©rification des conteneurs ==="

# Test conteneurs en cours d'ex√©cution
((total_tests++))
if docker ps --format "table {{.Names}}" | grep -q "sio_"; then
    echo -e "Test: Conteneurs SIO en cours d'ex√©cution... ${GREEN}‚úÖ OK${NC}"
    ((passed_tests++))
else
    echo -e "Test: Conteneurs SIO en cours d'ex√©cution... ${YELLOW}‚ö†Ô∏è  AUCUN CONTENEUR${NC}"
fi

# Test images construites
((total_tests++))
if docker images | grep -q "sio-"; then
    echo -e "Test: Images SIO construites... ${GREEN}‚úÖ OK${NC}"
    ((passed_tests++))
else
    echo -e "Test: Images SIO construites... ${YELLOW}‚ö†Ô∏è  AUCUNE IMAGE${NC}"
fi

echo
echo "=== V√©rification des services ==="

# Test MongoDB
((total_tests++))
if docker exec sio_mongodb_prod mongosh --eval "db.adminCommand('ping')" 2>/dev/null | grep -q "ok.*1"; then
    echo -e "Test: MongoDB accessible... ${GREEN}‚úÖ OK${NC}"
    ((passed_tests++))
else
    echo -e "Test: MongoDB accessible... ${RED}‚ùå √âCHEC${NC}"
fi

# Test des ports (si les services sont d√©marr√©s)
if docker ps | grep -q "sio_frontend_prod"; then
    ((total_tests++))
    if test_port "80" "Frontend"; then
        ((passed_tests++))
    fi
fi

if docker ps | grep -q "sio_backend_node_prod"; then
    ((total_tests++))
    if test_port "4000" "Backend Node.js"; then
        ((passed_tests++))
    fi
fi

if docker ps | grep -q "sio_backend_python_prod"; then
    ((total_tests++))
    if test_port "8000" "Backend Python"; then
        ((passed_tests++))
    fi
fi

if docker ps | grep -q "sio_backend_llm_prod"; then
    ((total_tests++))
    if test_port "8001" "Backend LLM"; then
        ((passed_tests++))
    fi
fi

echo
echo "=== V√©rification des volumes ==="

# Test volumes Docker
((total_tests++))
if docker volume ls | grep -q "sio_"; then
    echo -e "Test: Volumes SIO cr√©√©s... ${GREEN}‚úÖ OK${NC}"
    ((passed_tests++))
else
    echo -e "Test: Volumes SIO cr√©√©s... ${YELLOW}‚ö†Ô∏è  AUCUN VOLUME${NC}"
fi

echo
echo "=== V√©rification des dossiers ==="

# Test dossiers de donn√©es
for dir in logs data cache backups; do
    ((total_tests++))
    if [ -d "$dir" ]; then
        echo -e "Test: Dossier $dir... ${GREEN}‚úÖ OK${NC}"
        ((passed_tests++))
    else
        echo -e "Test: Dossier $dir... ${YELLOW}‚ö†Ô∏è  MANQUANT${NC}"
    fi
done

echo
echo "=== R√©sum√© ==="
echo "Tests effectu√©s: $total_tests"
echo "Tests r√©ussis: $passed_tests"
echo "Tests √©chou√©s: $((total_tests - passed_tests))"

if [ $passed_tests -eq $total_tests ]; then
    echo -e "${GREEN}üéâ Tous les tests sont pass√©s !${NC}"
    echo "L'installation SIO est compl√®te et fonctionnelle."
elif [ $passed_tests -gt $((total_tests / 2)) ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Installation partiellement r√©ussie${NC}"
    echo "Certains composants n√©cessitent une attention."
else
    echo -e "${RED}‚ùå Installation incompl√®te${NC}"
    echo "Veuillez v√©rifier la configuration et relancer l'installation."
fi

echo
echo "üîß Commandes utiles :"
echo "   ./scripts/docker/10-status.sh    # V√©rifier l'√©tat des services"
echo "   ./scripts/docker/06-logs.sh      # Voir les logs"
echo "   ./scripts/docker/03-start-services.sh  # Red√©marrer les services"
