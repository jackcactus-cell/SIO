# Script PowerShell pour d√©marrer le Projet Oracle Audit Complet

Write-Host "üöÄ D√©marrage du Projet Oracle Audit Complet" -ForegroundColor Green
Write-Host "=========================================="

# V√©rifier Docker
if (!(Get-Command docker -ErrorAction SilentlyContinue)) {
    Write-Host "‚ùå Docker n'est pas install√©. Veuillez installer Docker Desktop." -ForegroundColor Red
    exit 1
}

if (!(Get-Command docker-compose -ErrorAction SilentlyContinue)) {
    Write-Host "‚ùå Docker Compose n'est pas install√©. Veuillez installer Docker Compose." -ForegroundColor Red
    exit 1
}

# V√©rifier si les services tournent d√©j√†
Write-Host "üîç V√©rification des services existants..."
try {
    $runningServices = & docker-compose -f docker-compose.dev.yml ps --services --filter "status=running" 2>$null
    if ($runningServices) {
        Write-Host "‚ö†Ô∏è  Certains services sont d√©j√† en cours d'ex√©cution." -ForegroundColor Yellow
        $restart = Read-Host "Voulez-vous les red√©marrer ? (y/n)"
        if ($restart -eq "y" -or $restart -eq "Y") {
            Write-Host "üîÑ Arr√™t des services existants..."
            & docker-compose -f docker-compose.dev.yml down
        }
    }
} catch {
    # Continuer si docker-compose n'est pas encore configur√©
}

# Configuration Oracle optionnelle
$envFile = ""
if (Test-Path "oracle.env") {
    Write-Host "‚úÖ Configuration Oracle trouv√©e (oracle.env)" -ForegroundColor Green
    $envFile = "--env-file oracle.env"
} else {
    Write-Host "‚ö†Ô∏è  Aucune configuration Oracle trouv√©e" -ForegroundColor Yellow
    Write-Host "   Pour activer l'extraction Oracle automatique:"
    Write-Host "   1. Copiez oracle.env.example vers oracle.env"
    Write-Host "   2. Configurez vos param√®tres Oracle"
    Write-Host "   3. Red√©marrez le projet"
}

# Cr√©er les r√©pertoires n√©cessaires
Write-Host "üìÅ Cr√©ation des r√©pertoires..."
$directories = @(
    "logs",
    "backend\llm-prototype\logs",
    "backend\llm-prototype\chroma_db",
    "backend\llm-prototype\uploads"
)

foreach ($dir in $directories) {
    if (!(Test-Path $dir)) {
        New-Item -ItemType Directory -Path $dir -Force | Out-Null
    }
}

# Construire et d√©marrer les services
Write-Host "üê≥ Construction et d√©marrage des services Docker..." -ForegroundColor Cyan
Write-Host "   Ceci peut prendre quelques minutes la premi√®re fois..."

$dockerCommand = "docker-compose -f docker-compose.dev.yml $envFile up -d --build"
$result = Invoke-Expression $dockerCommand

if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Services d√©marr√©s avec succ√®s!" -ForegroundColor Green
    
    Write-Host "‚è≥ Attente de l'initialisation des services..."
    Start-Sleep -Seconds 10
    
    # V√©rifier les services
    Write-Host "üîç V√©rification des services..."
    
    $services = @(
        @{Name="Frontend"; Url="http://localhost:5173"},
        @{Name="Backend Node.js"; Url="http://localhost:4000"},
        @{Name="Backend Python"; Url="http://localhost:8000"},
        @{Name="Backend LLM"; Url="http://localhost:8001"}
    )
    
    foreach ($service in $services) {
        try {
            $response = Invoke-WebRequest -Uri $service.Url -Method Get -TimeoutSec 5 -UseBasicParsing
            if ($response.StatusCode -eq 200) {
                Write-Host "‚úÖ $($service.Name): $($service.Url)" -ForegroundColor Green
            } else {
                Write-Host "‚ö†Ô∏è  $($service.Name): en cours de d√©marrage..." -ForegroundColor Yellow
            }
        } catch {
            Write-Host "‚ö†Ô∏è  $($service.Name): en cours de d√©marrage..." -ForegroundColor Yellow
        }
    }
    
    Write-Host ""
    Write-Host "üéâ PROJET D√âMARR√â AVEC SUCC√àS!" -ForegroundColor Green
    Write-Host "=============================="
    Write-Host ""
    Write-Host "üì± Acc√®s √† l'application:" -ForegroundColor Cyan
    Write-Host "   üåê Frontend:           http://localhost:5173"
    Write-Host "   üîß API Node.js:        http://localhost:4000"
    Write-Host "   üêç API Python:         http://localhost:8000"
    Write-Host "   ü§ñ API LLM:            http://localhost:8001"
    Write-Host "   üìö Documentation LLM:  http://localhost:8001/docs"
    Write-Host ""
    Write-Host "üß™ Test du syst√®me:" -ForegroundColor Yellow
    Write-Host "   python test_final_system.py"
    Write-Host ""
    Write-Host "üìä Fonctionnalit√©s disponibles:" -ForegroundColor Cyan
    Write-Host "   ‚úÖ Upload de fichiers Excel/CSV/XLS"
    Write-Host "   ‚úÖ Chatbot intelligent avec mots-cl√©s"
    Write-Host "   ‚úÖ Extraction Oracle Audit Trail (si configur√©)"
    Write-Host "   ‚úÖ Analyse automatique et questions sugg√©r√©es"
    Write-Host "   ‚úÖ Tableaux simples et r√©sum√©s"
    Write-Host ""
    Write-Host "üîß Gestion des services:" -ForegroundColor Yellow
    Write-Host "   Arr√™ter:    docker-compose -f docker-compose.dev.yml down"
    Write-Host "   Logs:       docker-compose -f docker-compose.dev.yml logs -f"
    Write-Host "   Red√©marrer: .\start_project.ps1"
    Write-Host ""
    Write-Host "üìñ Consultez README_FINALISATION.md pour la documentation compl√®te" -ForegroundColor Magenta
    
} else {
    Write-Host "‚ùå Erreur lors du d√©marrage des services" -ForegroundColor Red
    Write-Host "üîç V√©rifiez les logs avec: docker-compose -f docker-compose.dev.yml logs" -ForegroundColor Yellow
    exit 1
}
