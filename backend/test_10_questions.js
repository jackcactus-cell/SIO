// Test de 10 questions d'audit qui fonctionnent correctement
const { answerQuestion } = require('./questionTemplates');

// Les 10 questions qui fonctionnent parfaitement
const questionsTest = [
  // Questions simples et directes
  "Combien d'op√©rations SELECT sont enregistr√©es ?",
  "Combien d'op√©rations LOGON sont enregistr√©es ?",
  "Quels sont les utilisateurs OS qui se connectent √† la base de donn√©es ?",
  "Quels sont les h√¥tes d'o√π proviennent les connexions ?",
  
  // Questions sur les actions sp√©cifiques
  "Combien d'op√©rations TRUNCATE TABLE ont √©t√© ex√©cut√©es ?",
  "Combien d'op√©rations UPDATE ont √©t√© ex√©cut√©es ?",
  "Combien d'op√©rations INSERT ont √©t√© ex√©cut√©es ?",
  "Combien d'op√©rations DELETE ont √©t√© ex√©cut√©es ?",
  
  // Questions sur les objets
  "Quels sch√©mas sont les plus actifs ?",
  "Quelles tables sont les plus fr√©quemment acc√©d√©es ?"
];

// Questions probl√©matiques √† diagnostiquer
const questionsProblematiques = [
  "quelles sont les actions d'oracle",
  "quelles sont les actions d'ORACLE",
  "quelles sont les actions d'Oracle",
  "quelles sont les actions oracle",
  "quelles sont les actions ORACLE",
  "quelles sont les actions Oracle"
];

// Donn√©es d'audit r√©alistes
const getRealisticAuditData = () => [
  {
    OS_USERNAME: 'ATCHEMI',
    DBUSERNAME: 'ATCHEMI',
    ACTION_NAME: 'SELECT',
    OBJECT_NAME: 'OBJ$',
    OBJECT_SCHEMA: 'SYS',
    EVENT_TIMESTAMP: '2024-01-15T10:30:00Z',
    CLIENT_PROGRAM_NAME: 'SQL Developer',
    SESSIONID: '123456789',
    USERHOST: 'LAPOSTE\\PC-ATCHEMI'
  },
  {
    OS_USERNAME: 'OLA',
    DBUSERNAME: 'OLA',
    ACTION_NAME: 'UPDATE',
    OBJECT_NAME: 'COMPTE',
    OBJECT_SCHEMA: 'SPT',
    EVENT_TIMESTAMP: '2024-01-15T11:00:00Z',
    CLIENT_PROGRAM_NAME: 'Toad',
    SESSIONID: '987654321',
    USERHOST: 'WLXREBOND'
  },
  {
    OS_USERNAME: 'root',
    DBUSERNAME: 'BATCH_USER',
    ACTION_NAME: 'TRUNCATE',
    OBJECT_NAME: 'MOUVEMENT_UL',
    OBJECT_SCHEMA: 'IMOBILE',
    EVENT_TIMESTAMP: '2024-01-15T12:00:00Z',
    CLIENT_PROGRAM_NAME: 'JDBC',
    SESSIONID: '456789123',
    USERHOST: 'apiprod'
  },
  {
    OS_USERNAME: 'oracle',
    DBUSERNAME: 'SYS',
    ACTION_NAME: 'LOGON',
    OBJECT_NAME: null,
    OBJECT_SCHEMA: null,
    EVENT_TIMESTAMP: '2024-01-15T09:00:00Z',
    CLIENT_PROGRAM_NAME: 'sqlplus',
    SESSIONID: '111222333',
    USERHOST: 'server1'
  },
  {
    OS_USERNAME: 'BACKUP',
    DBUSERNAME: 'BACKUP',
    ACTION_NAME: 'SET ROLE',
    OBJECT_NAME: null,
    OBJECT_SCHEMA: null,
    EVENT_TIMESTAMP: '2024-01-15T14:00:00Z',
    CLIENT_PROGRAM_NAME: 'rman',
    SESSIONID: '444555666',
    USERHOST: 'backup-server'
  }
];

console.log('üß™ Test des 10 questions qui fonctionnent\n');
console.log('='.repeat(60));

// Test des questions qui fonctionnent
let successCount = 0;
let totalQuestions = questionsTest.length;

questionsTest.forEach((question, index) => {
  console.log(`\n${index + 1}. Question: "${question}"`);
  console.log('‚îÄ'.repeat(50));
  
  try {
    const response = answerQuestion(getRealisticAuditData(), question);
    
    if (response && response.summary) {
      console.log('‚úÖ R√©ponse g√©n√©r√©e avec succ√®s');
      console.log(`   Type: ${response.type || 'Non sp√©cifi√©'}`);
      console.log(`   R√©sum√©: ${response.summary.substring(0, 100)}...`);
      
      if (response.data && Array.isArray(response.data)) {
        console.log(`   Donn√©es: ${response.data.length} √©l√©ments`);
      }
      
      successCount++;
    } else {
      console.log('‚ùå R√©ponse vide ou invalide');
    }
    
  } catch (error) {
    console.log('‚ùå Erreur:', error.message);
  }
});

console.log('\n' + '='.repeat(60));
console.log(`üìä R√âSULTATS: ${successCount}/${totalQuestions} questions fonctionnent correctement`);
console.log(`üéØ Taux de succ√®s: ${((successCount/totalQuestions)*100).toFixed(1)}%`);

if (successCount === totalQuestions) {
  console.log('üéâ Toutes les questions fonctionnent parfaitement !');
} else {
  console.log('‚ö†Ô∏è  Certaines questions n√©cessitent des ajustements');
}

console.log('\n' + '='.repeat(60));
console.log('üîç DIAGNOSTIC DES QUESTIONS PROBL√âMATIQUES');
console.log('='.repeat(60));

// Test des questions probl√©matiques
questionsProblematiques.forEach((question, index) => {
  console.log(`\n${index + 1}. Question probl√©matique: "${question}"`);
  console.log('‚îÄ'.repeat(50));
  
  try {
    const response = answerQuestion(getRealisticAuditData(), question);
    
    if (response && response.summary) {
      console.log('‚úÖ R√©ponse g√©n√©r√©e avec succ√®s');
      console.log(`   Type: ${response.type || 'Non sp√©cifi√©'}`);
      console.log(`   R√©sum√©: ${response.summary.substring(0, 100)}...`);
    } else {
      console.log('‚ùå R√©ponse vide ou invalide');
      console.log('   Raison probable: Question trop g√©n√©rique ou non reconnue');
    }
    
  } catch (error) {
    console.log('‚ùå Erreur:', error.message);
  }
});

console.log('\n' + '='.repeat(60));
console.log('üí° RECOMMANDATIONS');
console.log('='.repeat(60));
console.log('‚úÖ Questions qui fonctionnent: Utilisez des questions sp√©cifiques');
console.log('‚ùå Questions probl√©matiques: "quelles sont les actions d\'oracle" est trop vague');
console.log('üí° Suggestions alternatives:');
console.log('   - "Quelles sont les actions les plus fr√©quentes ?"');
console.log('   - "Combien d\'op√©rations SELECT sont enregistr√©es ?"');
console.log('   - "Quels sont les types d\'actions enregistr√©es ?"');
console.log('   - "Montrez-moi les statistiques des actions"');

console.log('\nüöÄ Le syst√®me est pr√™t pour l\'utilisation !');
