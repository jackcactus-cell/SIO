// Syst√®me de conversation intelligent pour le chatbot SAO
class IntelligentChatbot {
  constructor() {
    this.conversationHistory = [];
    this.userContext = {};
    this.greetingPatterns = [
      /^(bonjour|salut|hello|hi|hey|bonsoir|bon matin|bonne journ√©e)/i,
      /^(comment √ßa va|√ßa va|comment allez-vous|comment tu vas)/i,
      /^(merci|thanks|thank you)/i,
      /^(au revoir|bye|goodbye|√† bient√¥t|√† plus)/i
    ];
    
    this.questionKeywords = [
      'utilisateur', 'action', 'objet', 's√©curit√©', 'statistique', 'temps', 'acc√®s', 
      'client', 'infrastructure', 'session', 'table', 'sch√©ma', 'requ√™te', 'sql',
      'programme', 'terminal', 'h√¥te', 'authentification', 'audit', 'base de donn√©es',
      'utilisateur', 'user', 'utilisateurs', 'users', 'personne', 'personnes',
      'action', 'actions', 'op√©ration', 'op√©rations', 'activit√©', 'activit√©s',
      'objet', 'objets', 'table', 'tables', 'vue', 'vues', 'proc√©dure', 'proc√©dures',
      's√©curit√©', 'security', 's√ªr', 's√ªret√©', 'protection', 'acc√®s', 'access',
      'statistique', 'statistiques', 'stats', 'm√©trique', 'm√©triques', 'performance',
      'temps', 'time', 'heure', 'heures', 'p√©riode', 'p√©riodes', 'date', 'dates',
      'client', 'clients', 'application', 'applications', 'programme', 'programmes',
      'infrastructure', 'serveur', 'serveurs', 'h√¥te', 'h√¥tes', 'host', 'hosts',
      'session', 'sessions', 'connexion', 'connexions', 'connection', 'connections',
      'requ√™te', 'requ√™tes', 'query', 'queries', 'sql', 'select', 'insert', 'update', 'delete',
      'terminal', 'terminals', 'console', 'consoles', 'interface', 'interfaces',
      'authentification', 'auth', 'login', 'connexion', 'user', 'password',
      'audit', 'audits', 'tra√ßabilit√©', 'tra√ßage', 'log', 'logs', 'historique',
      'base de donn√©es', 'database', 'oracle', 'db', 'schema', 'schemas'
    ];
  }

  // Analyser le type de message
  analyzeMessage(message) {
    try {
      const normalizedMessage = message.toLowerCase().trim();
      
      // V√©rifier si c'est une question temporelle
      const timeKeywords = ['jour', 'journ√©e', 'date', 'temps', 'heure', 'p√©riode', 'activit√©', 'quand', 'moment'];
      const isTimeQuestion = timeKeywords.some(keyword => normalizedMessage.includes(keyword));
      
      if (isTimeQuestion) {
        return { type: 'time_question', confidence: 0.9 };
      }
      
      // V√©rifier si c'est une salutation
      for (const pattern of this.greetingPatterns) {
        if (pattern.test(normalizedMessage)) {
          return { type: 'greeting', pattern: pattern.source };
        }
      }
      
      // V√©rifier si c'est une question
      if (normalizedMessage.includes('?') || 
          normalizedMessage.includes('quoi') || 
          normalizedMessage.includes('comment') || 
          normalizedMessage.includes('quand') || 
          normalizedMessage.includes('o√π') || 
          normalizedMessage.includes('qui') || 
          normalizedMessage.includes('combien') ||
          normalizedMessage.includes('pourquoi')) {
        return { type: 'question', confidence: this.calculateQuestionConfidence(normalizedMessage) };
      }
      
      // V√©rifier si c'est une demande d'aide
      if (normalizedMessage.includes('aide') || 
          normalizedMessage.includes('help') || 
          normalizedMessage.includes('comment utiliser') ||
          normalizedMessage.includes('que puis-je faire')) {
        return { type: 'help' };
      }
      
      return { type: 'statement' };
    } catch (error) {
      console.error('Erreur lors de l\'analyse du message:', error);
      return { type: 'statement' };
    }
  }

  // Extraire les mots-cl√©s d'un message
  extractKeywords(message) {
    try {
      const normalizedMessage = message.toLowerCase();
      const extractedKeywords = [];
      const keywordCategories = {
        users: ['utilisateur', 'user', 'utilisateurs', 'users', 'personne', 'personnes'],
        actions: ['action', 'actions', 'op√©ration', 'op√©rations', 'activit√©', 'activit√©s'],
        objects: ['objet', 'objets', 'table', 'tables', 'vue', 'vues', 'proc√©dure', 'proc√©dures'],
        security: ['s√©curit√©', 'security', 's√ªr', 's√ªret√©', 'protection', 'acc√®s', 'access'],
        statistics: ['statistique', 'statistiques', 'stats', 'm√©trique', 'm√©triques', 'performance'],
        time: ['temps', 'time', 'heure', 'heures', 'p√©riode', 'p√©riodes', 'date', 'dates'],
        clients: ['client', 'clients', 'application', 'applications', 'programme', 'programmes'],
        infrastructure: ['infrastructure', 'serveur', 'serveurs', 'h√¥te', 'h√¥tes', 'host', 'hosts'],
        sessions: ['session', 'sessions', 'connexion', 'connexions', 'connection', 'connections'],
        queries: ['requ√™te', 'requ√™tes', 'query', 'queries', 'sql', 'select', 'insert', 'update', 'delete'],
        terminals: ['terminal', 'terminals', 'console', 'consoles', 'interface', 'interfaces'],
        auth: ['authentification', 'auth', 'login', 'connexion', 'user', 'password'],
        audit: ['audit', 'audits', 'tra√ßabilit√©', 'tra√ßage', 'log', 'logs', 'historique'],
        database: ['base de donn√©es', 'database', 'oracle', 'db', 'schema', 'schemas']
      };

      // Trouver les mots-cl√©s par cat√©gorie
      Object.entries(keywordCategories).forEach(([category, keywords]) => {
        keywords.forEach(keyword => {
          if (normalizedMessage.includes(keyword)) {
            extractedKeywords.push({
              keyword: keyword,
              category: category,
              relevance: this.calculateKeywordRelevance(normalizedMessage, keyword)
            });
          }
        });
      });

      // Trier par pertinence
      extractedKeywords.sort((a, b) => b.relevance - a.relevance);
      
      return extractedKeywords;
    } catch (error) {
      console.error('Erreur lors de l\'extraction des mots-cl√©s:', error);
      return [];
    }
  }

  // Calculer la pertinence d'un mot-cl√©
  calculateKeywordRelevance(message, keyword) {
    try {
      let relevance = 0;
      
      // Pertinence de base
      relevance += 0.5;
      
      // Bonus pour les mots-cl√©s plus sp√©cifiques
      if (keyword.length > 5) relevance += 0.2;
      
      // Bonus pour les mots-cl√©s techniques
      if (['sql', 'oracle', 'database', 'schema', 'audit'].includes(keyword)) {
        relevance += 0.3;
      }
      
      // Bonus pour les mots-cl√©s d'action
      if (['select', 'insert', 'update', 'delete', 'truncate', 'drop', 'alter'].includes(keyword)) {
        relevance += 0.4;
      }
      
      return Math.min(relevance, 1.0);
    } catch (error) {
      console.error('Erreur lors du calcul de pertinence:', error);
      return 0.5;
    }
  }

  // Calculer la confiance que c'est une question pertinente
  calculateQuestionConfidence(message) {
    try {
      const normalizedMessage = message.toLowerCase();
      let confidence = 0;
      
      // Compter les mots-cl√©s pertinents
      this.questionKeywords.forEach(keyword => {
        if (normalizedMessage.includes(keyword)) {
          confidence += 0.3;
        }
      });
      
      // Bonus pour les questions sp√©cifiques √† Oracle
      if (normalizedMessage.includes('oracle') || 
          normalizedMessage.includes('base de donn√©es') ||
          normalizedMessage.includes('audit')) {
        confidence += 0.2;
      }
      
      return Math.min(confidence, 1.0);
    } catch (error) {
      console.error('Erreur lors du calcul de confiance:', error);
      return 0.5; // Confiance par d√©faut
    }
  }

  // G√©n√©rer une r√©ponse de salutation
  generateGreetingResponse(message) {
    try {
      const normalizedMessage = message.toLowerCase();
      const hour = new Date().getHours();
      
      if (normalizedMessage.includes('bonjour') || normalizedMessage.includes('salut') || normalizedMessage.includes('hello')) {
        if (hour < 12) {
          return {
            type: 'greeting',
            message: "Bonjour ! üòä Je suis votre assistant SAO (Syst√®me d'Information Oracle). Je suis l√† pour vous aider √† analyser vos donn√©es d'audit Oracle. Comment puis-je vous √™tre utile aujourd'hui ?",
            suggestions: [
              "Quels sont les utilisateurs les plus actifs ?",
              "Montrez-moi les actions de s√©curit√©",
              "Analysez les performances de la base"
            ]
          };
        } else if (hour < 18) {
          return {
            type: 'greeting',
            message: "Bonjour ! üåü Je suis votre assistant SAO. Pr√™t √† analyser vos donn√©es d'audit Oracle avec vous ! Que souhaitez-vous explorer ?",
            suggestions: [
              "Quels objets sont les plus acc√©d√©s ?",
              "Montrez-moi les connexions r√©centes",
              "Analysez les sch√©mas actifs"
            ]
          };
        } else {
          return {
            type: 'greeting',
            message: "Bonsoir ! üåô Votre assistant SAO est l√† pour vous accompagner dans l'analyse de vos donn√©es d'audit Oracle. Que voulez-vous examiner ?",
            suggestions: [
              "Quels sont les programmes clients utilis√©s ?",
              "Montrez-moi les actions suspectes",
              "Analysez les sessions actives"
            ]
          };
        }
      }
      
      if (normalizedMessage.includes('comment √ßa va') || normalizedMessage.includes('√ßa va')) {
        return {
          type: 'greeting',
          message: "Tr√®s bien, merci ! üòä Je suis pr√™t √† analyser vos donn√©es d'audit Oracle. Avez-vous des questions sp√©cifiques sur vos donn√©es ?",
          suggestions: [
            "Quels utilisateurs se connectent le plus ?",
            "Montrez-moi les actions de modification",
            "Analysez les acc√®s syst√®me"
          ]
        };
      }
      
      if (normalizedMessage.includes('merci')) {
        return {
          type: 'greeting',
          message: "De rien ! üòä C'est un plaisir de vous aider avec l'analyse de vos donn√©es Oracle. N'h√©sitez pas si vous avez d'autres questions !",
          suggestions: [
            "Pouvez-vous analyser les performances ?",
            "Montrez-moi les connexions suspectes",
            "Quels sont les objets les plus utilis√©s ?"
          ]
        };
      }
      
      if (normalizedMessage.includes('au revoir') || normalizedMessage.includes('bye')) {
        return {
          type: 'farewell',
          message: "Au revoir ! üëã N'h√©sitez pas √† revenir si vous avez besoin d'analyser vos donn√©es d'audit Oracle. Bonne journ√©e !",
          suggestions: []
        };
      }
      
      return {
        type: 'greeting',
        message: "Bonjour ! üòä Je suis votre assistant SAO. Je peux vous aider √† analyser vos donn√©es d'audit Oracle. Que souhaitez-vous savoir ?",
        suggestions: [
          "Quels sont les utilisateurs actifs ?",
          "Montrez-moi les actions de s√©curit√©",
          "Analysez les performances"
        ]
      };
    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration de r√©ponse de salutation:', error);
      return {
        type: 'greeting',
        message: "Bonjour ! üòä Je suis votre assistant SAO. Comment puis-je vous aider ?",
        suggestions: [
          "Quels sont les utilisateurs actifs ?",
          "Montrez-moi les actions r√©centes",
          "Analysez les performances"
        ]
      };
    }
  }

  // G√©n√©rer une analyse des mots-cl√©s
  generateKeywordAnalysis(keywords) {
    try {
      if (!keywords || keywords.length === 0) {
        return {
          detected: false,
          message: "Aucun mot-cl√© sp√©cifique d√©tect√©"
        };
      }

      const categories = {};
      keywords.forEach(kw => {
        if (!categories[kw.category]) {
          categories[kw.category] = [];
        }
        categories[kw.category].push(kw.keyword);
      });

      const topKeywords = keywords.slice(0, 3);
      const primaryCategory = Object.keys(categories)[0];

      return {
        detected: true,
        totalKeywords: keywords.length,
        topKeywords: topKeywords.map(kw => kw.keyword),
        categories: categories,
        primaryCategory: primaryCategory,
        relevance: keywords.reduce((sum, kw) => sum + kw.relevance, 0) / keywords.length
      };
    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration de l\'analyse des mots-cl√©s:', error);
      return { detected: false, message: "Erreur d'analyse" };
    }
  }

  // G√©n√©rer des suggestions bas√©es sur les mots-cl√©s
  generateSuggestionsFromKeywords(keywords) {
    try {
      const suggestions = [];
      
      if (!keywords || keywords.length === 0) {
        return [
          "Quels sont les utilisateurs actifs ?",
          "Montrez-moi les actions r√©centes",
          "Analysez les performances"
        ];
      }

      const categories = {};
      keywords.forEach(kw => {
        if (!categories[kw.category]) {
          categories[kw.category] = [];
        }
        categories[kw.category].push(kw.keyword);
      });

      // Suggestions bas√©es sur les cat√©gories d√©tect√©es
      if (categories.users) {
        suggestions.push("Quels sont les utilisateurs les plus actifs ?");
        suggestions.push("Combien d'utilisateurs distincts se connectent ?");
      }

      if (categories.actions) {
        suggestions.push("Quelles sont les actions les plus fr√©quentes ?");
        suggestions.push("Montrez-moi les actions de s√©curit√©");
      }

      if (categories.objects) {
        suggestions.push("Quels objets sont les plus acc√©d√©s ?");
        suggestions.push("Y a-t-il des acc√®s aux objets syst√®me ?");
      }

      if (categories.security) {
        suggestions.push("Montrez-moi les actions privil√©gi√©es");
        suggestions.push("Analysez les acc√®s suspects");
      }

      if (categories.time) {
        suggestions.push("√Ä quelle heure y a-t-il le plus d'activit√© ?");
        suggestions.push("Quelle est la r√©partition temporelle des actions ?");
      }

      if (categories.sessions) {
        suggestions.push("Combien de sessions actives y a-t-il ?");
        suggestions.push("Quelles sont les sessions les plus longues ?");
      }

      // Suggestions par d√©faut si pas assez de suggestions sp√©cifiques
      if (suggestions.length < 3) {
        suggestions.push("Quels sont les utilisateurs actifs ?");
        suggestions.push("Montrez-moi les actions r√©centes");
        suggestions.push("Analysez les performances");
      }

      return suggestions.slice(0, 3);
    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration des suggestions:', error);
      return [
        "Quels sont les utilisateurs actifs ?",
        "Montrez-moi les actions r√©centes",
        "Analysez les performances"
      ];
    }
  }

  // G√©n√©rer des suggestions de reformulation pour les questions non r√©pertori√©es
  generateReformulationSuggestions(message, keywords = []) {
    try {
      const normalizedMessage = message.toLowerCase();
      const suggestions = [];
      
      // Analyser les mots-cl√©s pr√©sents
      const presentKeywords = this.questionKeywords.filter(keyword => 
        normalizedMessage.includes(keyword)
      );
      
      // G√©n√©rer des suggestions bas√©es sur les mots-cl√©s pr√©sents
      if (presentKeywords.includes('utilisateur')) {
        suggestions.push(
          "Quels sont les utilisateurs OS les plus fr√©quents ?",
          "Combien d'utilisateurs distincts se connectent ?",
          "Quels utilisateurs ont effectu√© le plus d'actions ?"
        );
      }
      
      if (presentKeywords.includes('action')) {
        suggestions.push(
          "Quelles sont les actions les plus fr√©quentes ?",
          "Combien d'op√©rations SELECT sont enregistr√©es ?",
          "Quels utilisateurs ont effectu√© des TRUNCATE ?"
        );
      }
      
      if (presentKeywords.includes('objet')) {
        suggestions.push(
          "Quels objets sont les plus fr√©quemment acc√©d√©s ?",
          "Quels sch√©mas sont les plus actifs ?",
          "Y a-t-il des acc√®s aux objets syst√®me ?"
        );
      }
      
      if (presentKeywords.includes('s√©curit√©')) {
        suggestions.push(
          "Y a-t-il des acc√®s suspects aux objets syst√®me ?",
          "Quels utilisateurs acc√®dent au sch√©ma SYS ?",
          "Y a-t-il des connexions depuis des terminaux inconnus ?"
        );
      }
      
      // Si aucun mot-cl√© sp√©cifique, proposer des questions g√©n√©rales
      if (suggestions.length === 0) {
        suggestions.push(
          "Quels sont les utilisateurs les plus actifs ?",
          "Quelles sont les actions les plus fr√©quentes ?",
          "Quels objets sont les plus acc√©d√©s ?",
          "Y a-t-il des activit√©s suspectes ?"
        );
      }
      
      return suggestions.slice(0, 3); // Limiter √† 3 suggestions
    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration des suggestions:', error);
      return [
        "Quels sont les utilisateurs les plus actifs ?",
        "Quelles sont les actions les plus fr√©quentes ?",
        "Quels objets sont les plus acc√©d√©s ?"
      ];
    }
  }

  // G√©n√©rer une r√©ponse pour les questions non r√©pertori√©es
  generateUnrecognizedQuestionResponse(message) {
    try {
      const confidence = this.calculateQuestionConfidence(message);
      
      if (confidence > 0.5) {
        return {
          type: 'unrecognized_high_confidence',
          message: `Je comprends votre question sur "${message}", mais je n'ai pas de r√©ponse pr√©d√©finie pour cette formulation exacte. ü§î

Pouvez-vous reformuler votre question en utilisant l'une de ces formulations ?`,
          suggestions: this.generateReformulationSuggestions(message),
          confidence: confidence
        };
      } else {
        return {
          type: 'unrecognized_low_confidence',
          message: `Je ne suis pas s√ªr de comprendre votre question "${message}". ü§∑‚Äç‚ôÇÔ∏è

Pour vous aider au mieux, pourriez-vous reformuler votre question en utilisant des termes plus sp√©cifiques √† l'audit Oracle ?`,
          suggestions: [
            "Quels sont les utilisateurs les plus actifs ?",
            "Quelles sont les actions les plus fr√©quentes ?",
            "Quels objets sont les plus acc√©d√©s ?",
            "Y a-t-il des activit√©s suspectes ?"
          ],
          confidence: confidence
        };
      }
    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration de r√©ponse non reconnue:', error);
      return {
        type: 'unrecognized_low_confidence',
        message: "Je ne comprends pas votre question. Pouvez-vous reformuler ?",
        suggestions: [
          "Quels sont les utilisateurs les plus actifs ?",
          "Quelles sont les actions les plus fr√©quentes ?",
          "Quels objets sont les plus acc√©d√©s ?"
        ],
        confidence: 0
      };
    }
  }

  // G√©n√©rer une r√©ponse d'aide
  generateHelpResponse() {
    try {
      return {
        type: 'help',
        message: `Bien s√ªr ! Je suis votre assistant SAO sp√©cialis√© dans l'analyse des donn√©es d'audit Oracle. üöÄ

**Voici ce que je peux analyser :**
‚Ä¢  Utilisateurs : OS_USERNAME, DBUSERNAME, connexions
‚Ä¢  Actions: SELECT, INSERT, UPDATE, DELETE, TRUNCATE
‚Ä¢  Objets : tables, sch√©mas, objets syst√®me
‚Ä¢  S√©curit√© : acc√®s suspects, connexions anormales
‚Ä¢  Statistiques : fr√©quences, tendances, patterns
‚Ä¢  Temps : p√©riodes d'activit√©, sessions
‚Ä¢  Clients : programmes, terminaux, h√¥tes

**Exemples de questions :**
‚Ä¢ "Quels sont les utilisateurs les plus actifs ?"
‚Ä¢ "Quelles sont les actions les plus fr√©quentes ?"
‚Ä¢ "Y a-t-il des acc√®s suspects ?"
‚Ä¢ "Quels objets sont les plus acc√©d√©s ?"

N'h√©sitez pas √† me poser vos questions ! üòä`,
        suggestions: [
          "Quels sont les utilisateurs les plus actifs ?",
          "Quelles sont les actions les plus fr√©quentes ?",
          "Y a-t-il des acc√®s suspects ?",
          "Quels objets sont les plus acc√©d√©s ?"
        ]
      };
    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration de r√©ponse d\'aide:', error);
      return {
        type: 'help',
        message: "Je suis votre assistant SAO. Je peux analyser les donn√©es d'audit Oracle. Que souhaitez-vous savoir ?",
        suggestions: [
          "Quels sont les utilisateurs actifs ?",
          "Quelles sont les actions r√©centes ?",
          "Quels objets sont acc√©d√©s ?"
        ]
      };
    }
  }

  // Analyser les donn√©es temporelles
  analyzeTimeData(auditData, question) {
    try {
      if (!auditData || !Array.isArray(auditData) || auditData.length === 0) {
        return {
          type: 'time_analysis',
          message: "Aucune donn√©e temporelle disponible pour l'analyse.",
          data: null
        };
      }

      const normalizedQuestion = question.toLowerCase();
      
      // Analyser par jour
      if (normalizedQuestion.includes('jour') || normalizedQuestion.includes('journ√©e')) {
        return this.analyzeDailyActivity(auditData);
      }
      
      // Analyser par heure
      if (normalizedQuestion.includes('heure') || normalizedQuestion.includes('pic')) {
        return this.analyzeHourlyActivity(auditData);
      }
      
      // Analyser la p√©riode
      if (normalizedQuestion.includes('p√©riode') || normalizedQuestion.includes('date')) {
        return this.analyzeTimePeriod(auditData);
      }
      
      // Analyse temporelle g√©n√©rale
      return this.analyzeGeneralTimeActivity(auditData);
      
    } catch (error) {
      console.error('Erreur lors de l\'analyse temporelle:', error);
      return {
        type: 'time_analysis',
        message: "Erreur lors de l'analyse temporelle des donn√©es.",
        data: null
      };
    }
  }

  // Analyser l'activit√© par jour
  analyzeDailyActivity(auditData) {
    try {
      const dailyActivity = {};
      
      auditData.forEach(record => {
        if (record.EVENT_TIMESTAMP || record.event_timestamp) {
          const date = new Date(record.EVENT_TIMESTAMP || record.event_timestamp);
          const dayKey = date.toDateString();
          
          if (!dailyActivity[dayKey]) {
            dailyActivity[dayKey] = {
              date: dayKey,
              count: 0,
              users: new Set(),
              actions: new Set(),
              objects: new Set()
            };
          }
          
          dailyActivity[dayKey].count++;
          if (record.DBUSERNAME || record.dbusername) {
            dailyActivity[dayKey].users.add(record.DBUSERNAME || record.dbusername);
          }
          if (record.ACTION_NAME || record.action_name) {
            dailyActivity[dayKey].actions.add(record.ACTION_NAME || record.action_name);
          }
          if (record.OBJECT_NAME || record.object_name) {
            dailyActivity[dayKey].objects.add(record.OBJECT_NAME || record.object_name);
          }
        }
      });
      
      // Convertir les Sets en tableaux
      Object.values(dailyActivity).forEach(day => {
        day.users = Array.from(day.users);
        day.actions = Array.from(day.actions);
        day.objects = Array.from(day.objects);
      });
      
      // Trouver le jour le plus actif
      const sortedDays = Object.values(dailyActivity).sort((a, b) => b.count - a.count);
      const mostActiveDay = sortedDays[0];
      
      return {
        type: 'daily_analysis',
        message: `Analyse de l'activit√© par jour :`,
        data: {
          mostActiveDay: mostActiveDay,
          allDays: sortedDays,
          summary: `Le jour le plus actif est ${mostActiveDay.date} avec ${mostActiveDay.count} actions par ${mostActiveDay.users.length} utilisateurs.`
        }
      };
      
    } catch (error) {
      console.error('Erreur lors de l\'analyse quotidienne:', error);
      return {
        type: 'daily_analysis',
        message: "Erreur lors de l'analyse de l'activit√© quotidienne.",
        data: null
      };
    }
  }

  // Analyser l'activit√© par heure
  analyzeHourlyActivity(auditData) {
    try {
      const hourlyActivity = {};
      
      // Initialiser les 24 heures
      for (let i = 0; i < 24; i++) {
        hourlyActivity[i] = {
          hour: i,
          count: 0,
          users: new Set(),
          actions: new Set()
        };
      }
      
      auditData.forEach(record => {
        if (record.EVENT_TIMESTAMP || record.event_timestamp) {
          const date = new Date(record.EVENT_TIMESTAMP || record.event_timestamp);
          const hour = date.getHours();
          
          hourlyActivity[hour].count++;
          if (record.DBUSERNAME || record.dbusername) {
            hourlyActivity[hour].users.add(record.DBUSERNAME || record.dbusername);
          }
          if (record.ACTION_NAME || record.action_name) {
            hourlyActivity[hour].actions.add(record.ACTION_NAME || record.action_name);
          }
        }
      });
      
      // Convertir les Sets en tableaux
      Object.values(hourlyActivity).forEach(hour => {
        hour.users = Array.from(hour.users);
        hour.actions = Array.from(hour.actions);
      });
      
      // Trouver l'heure de pointe
      const peakHour = Object.values(hourlyActivity).reduce((max, hour) => 
        hour.count > max.count ? hour : max
      );
      
      return {
        type: 'hourly_analysis',
        message: `Analyse de l'activit√© par heure :`,
        data: {
          peakHour: peakHour,
          allHours: Object.values(hourlyActivity),
          summary: `L'heure de pointe est ${peakHour.hour}h avec ${peakHour.count} actions par ${peakHour.users.length} utilisateurs.`
        }
      };
      
    } catch (error) {
      console.error('Erreur lors de l\'analyse horaire:', error);
      return {
        type: 'hourly_analysis',
        message: "Erreur lors de l'analyse de l'activit√© horaire.",
        data: null
      };
    }
  }

  // Analyser la p√©riode temporelle
  analyzeTimePeriod(auditData) {
    try {
      const timestamps = auditData
        .filter(record => record.EVENT_TIMESTAMP || record.event_timestamp)
        .map(record => new Date(record.EVENT_TIMESTAMP || record.event_timestamp));
      
      if (timestamps.length === 0) {
        return {
          type: 'period_analysis',
          message: "Aucune donn√©e temporelle disponible.",
          data: null
        };
      }
      
      const minDate = new Date(Math.min(...timestamps));
      const maxDate = new Date(Math.max(...timestamps));
      const durationDays = Math.ceil((maxDate - maxDate) / (1000 * 60 * 60 * 24));
      
      return {
        type: 'period_analysis',
        message: `P√©riode couverte par les donn√©es :`,
        data: {
          startDate: minDate.toDateString(),
          endDate: maxDate.toDateString(),
          durationDays: durationDays,
          totalRecords: timestamps.length,
          summary: `Les donn√©es couvrent ${durationDays} jours du ${minDate.toDateString()} au ${maxDate.toDateString()} avec ${timestamps.length} √©v√©nements.`
        }
      };
      
    } catch (error) {
      console.error('Erreur lors de l\'analyse de p√©riode:', error);
      return {
        type: 'period_analysis',
        message: "Erreur lors de l'analyse de la p√©riode temporelle.",
        data: null
      };
    }
  }

  // Analyse temporelle g√©n√©rale
  analyzeGeneralTimeActivity(auditData) {
    try {
      const dailyAnalysis = this.analyzeDailyActivity(auditData);
      const hourlyAnalysis = this.analyzeHourlyActivity(auditData);
      const periodAnalysis = this.analyzeTimePeriod(auditData);
      
      return {
        type: 'general_time_analysis',
        message: `Analyse temporelle compl√®te :`,
        data: {
          daily: dailyAnalysis.data,
          hourly: hourlyAnalysis.data,
          period: periodAnalysis.data,
          summary: `${periodAnalysis.data?.totalRecords || 0} √©v√©nements analys√©s sur ${periodAnalysis.data?.durationDays || 0} jours. Jour le plus actif : ${dailyAnalysis.data?.mostActiveDay?.date || 'N/A'}. Heure de pointe : ${hourlyAnalysis.data?.peakHour?.hour || 'N/A'}h.`
        }
      };
      
    } catch (error) {
      console.error('Erreur lors de l\'analyse temporelle g√©n√©rale:', error);
      return {
        type: 'general_time_analysis',
        message: "Erreur lors de l'analyse temporelle g√©n√©rale.",
        data: null
      };
    }
  }

  // Traiter un message et g√©n√©rer une r√©ponse
  processMessage(message, auditData = []) {
    try {
      console.log(`Message re√ßu: "${message}"`);
      
      // Analyser le type de message et extraire les mots-cl√©s
      const analysis = this.analyzeMessage(message);
      const keywords = this.extractKeywords(message);
      
      // Ajouter √† l'historique
      this.conversationHistory.push({
        timestamp: new Date().toISOString(),
        message: message,
        type: analysis.type,
        confidence: analysis.confidence || 0,
        keywords: keywords
      });
      
      let response;
      
      // G√©n√©rer la r√©ponse appropri√©e
      switch (analysis.type) {
        case 'greeting':
          response = this.generateGreetingResponse(message);
          break;
          
        case 'help':
          response = this.generateHelpResponse();
          break;
          
        case 'time_question':
          // Traiter les questions temporelles sp√©cifiquement
          const timeAnalysis = this.analyzeTimeData(auditData, message);
          response = {
            type: 'time_analysis',
            message: timeAnalysis.message,
            data: timeAnalysis.data,
            shouldProcessWithExistingSystem: false,
            confidence: 0.9,
            keywords: keywords,
            keywordAnalysis: this.generateKeywordAnalysis(keywords)
          };
          break;
          
        case 'question':
          // Pour les questions, on laisse le syst√®me existant les traiter
          // mais on ajoute une couche de validation et d'analyse des mots-cl√©s
          if (analysis.confidence < 0.3) {
            response = this.generateUnrecognizedQuestionResponse(message, keywords);
          } else {
            // Laisser le syst√®me de questions existant traiter
            response = {
              type: 'question',
              message: "Je vais analyser votre question... üîç",
              shouldProcessWithExistingSystem: true,
              confidence: analysis.confidence,
              keywords: keywords,
              keywordAnalysis: this.generateKeywordAnalysis(keywords)
            };
          }
          break;
          
        default:
          response = {
            type: 'statement',
            message: "Je comprends votre message. Avez-vous une question sp√©cifique sur vos donn√©es d'audit Oracle ? ü§î",
            suggestions: this.generateSuggestionsFromKeywords(keywords),
            keywords: keywords
          };
      }
      
      console.log(`R√©ponse g√©n√©r√©e: ${response.type} avec ${keywords.length} mots-cl√©s d√©tect√©s`);
      
      return {
        success: true,
        response: response,
        analysis: analysis,
        keywords: keywords,
        conversationContext: {
          historyLength: this.conversationHistory.length,
          userContext: this.userContext
        }
      };
      
    } catch (error) {
      console.error(`Erreur lors du traitement du message: ${message}`, error);
      return {
        success: false,
        error: error.message,
        response: {
          type: 'error',
          message: "D√©sol√©, j'ai rencontr√© une erreur lors du traitement de votre message. Pouvez-vous reformuler ? üòÖ"
        }
      };
    }
  }

  // Obtenir des statistiques enrichies (version simplifi√©e)
  getEnrichedStatistics(auditData) {
    try {
      if (!auditData || !Array.isArray(auditData)) {
        return {
          statistics: {
            total_records: 0,
            critical_actions: 0,
            suspicious_patterns: 0,
            high_risk_records: 0,
            system_access: 0,
            unknown_terminals: 0,
            destructive_operations: 0
          },
          enriched_data: []
        };
      }
      
      // Enrichir d'abord les donn√©es
      const enrichedData = this.enrichAuditData(auditData);
      
      const stats = {
        total_records: enrichedData.length,
        critical_actions: enrichedData.filter(r => r.analysis_metadata && r.analysis_metadata.criticality === 'HIGH').length,
        suspicious_patterns: enrichedData.filter(r => r.analysis_metadata && r.analysis_metadata.suspicious_patterns && r.analysis_metadata.suspicious_patterns.length > 0).length,
        high_risk_records: enrichedData.filter(r => r.analysis_metadata && r.analysis_metadata.security_risk === 'HIGH').length,
        system_access: enrichedData.filter(r => r.object_schema === 'SYS').length,
        unknown_terminals: enrichedData.filter(r => r.terminal === 'unknown').length,
        destructive_operations: enrichedData.filter(r => r.action_name && ['TRUNCATE', 'DROP', 'DELETE'].includes(r.action_name)).length
      };
      
      return {
        statistics: stats,
        enriched_data: enrichedData
      };
    } catch (error) {
      console.error('Erreur lors du calcul des statistiques enrichies:', error);
      
      return {
        statistics: {
          total_records: auditData ? auditData.length : 0,
          critical_actions: 0,
          suspicious_patterns: 0,
          high_risk_records: 0,
          system_access: 0,
          unknown_terminals: 0,
          destructive_operations: 0
        },
        enriched_data: auditData || []
      };
    }
  }

  // Enrichir les donn√©es d'audit avec des m√©tadonn√©es calcul√©es
  enrichAuditData(auditData) {
    try {
      if (!auditData || !Array.isArray(auditData)) {
        return [];
      }

      return auditData.map(record => {
        if (!record || typeof record !== 'object') {
          return record;
        }

        // Calculer la criticit√© de l'action
        const criticalActions = ['TRUNCATE', 'DROP', 'ALTER', 'GRANT', 'REVOKE'];
        const criticality = criticalActions.includes(record.action_name) ? 'HIGH' : 
                           ['DELETE', 'UPDATE'].includes(record.action_name) ? 'MEDIUM' : 'LOW';

        // D√©tecter les patterns suspects
        const suspiciousPatterns = [];
        if (record.object_schema === 'SYS' && !['SYS', 'SYSTEM'].includes(record.dbusername)) {
          suspiciousPatterns.push('ACCES_SYSTEME_NON_AUTORISE');
        }
        if (record.terminal === 'unknown') {
          suspiciousPatterns.push('TERMINAL_INCONNU');
        }
        if (record.action_name && ['TRUNCATE', 'DROP'].includes(record.action_name)) {
          suspiciousPatterns.push('OPERATION_DESTRUCTIVE');
        }

        // Calculer le niveau de risque de s√©curit√©
        const securityRisk = suspiciousPatterns.length > 0 ? 'HIGH' : 
                            criticality === 'HIGH' ? 'MEDIUM' : 'LOW';

        // Ajouter des tags pour faciliter l'analyse
        const tags = [];
        if (record.object_schema === 'SYS') tags.push('SYSTEM');
        if (criticalActions.includes(record.action_name)) tags.push('CRITICAL');
        if (suspiciousPatterns.length > 0) tags.push('SUSPICIOUS');
        if (record.action_name === 'SELECT') tags.push('READ');
        if (['INSERT', 'UPDATE', 'DELETE'].includes(record.action_name)) tags.push('WRITE');

        return {
          ...record,
          analysis_metadata: {
            criticality: criticality || 'LOW',
            suspicious_patterns: suspiciousPatterns || [],
            security_risk: securityRisk || 'LOW',
            tags: tags || [],
            risk_score: suspiciousPatterns.length * 10 + (criticality === 'HIGH' ? 50 : criticality === 'MEDIUM' ? 25 : 0)
          }
        };
      });
    } catch (error) {
      console.error('Erreur lors de l\'enrichissement des donn√©es:', error);
      return auditData; // Retourner les donn√©es originales en cas d'erreur
    }
  }
}

module.exports = IntelligentChatbot;
